// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          Role      @default(USER)
  defaultCurrency String  @default("USD")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  expenses      Expense[]
  incomes       Income[]
  subscription  Subscription?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  color     String    @default("#3B82F6")
  icon      String    @default("üìù")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  expenses  Expense[]
}

model IncomeCategory {
  id        String    @id @default(cuid())
  name      String    @unique
  color     String    @default("#10B981")
  icon      String    @default("üí∞")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  incomes   Income[]
}

model Expense {
  id          String   @id @default(cuid())
  title       String
  amount      Float
  currency    String   @default("USD")
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  @@index([userId])
  @@index([date])
  @@index([categoryId])
}

model Income {
  id          String   @id @default(cuid())
  title       String
  amount      Float
  currency    String   @default("USD")
  description String?
  date        DateTime @default(now())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  categoryId String
  category   IncomeCategory @relation(fields: [categoryId], references: [id])

  @@index([userId])
  @@index([date])
  @@index([categoryId])
}

model Subscription {
  id                String            @id @default(cuid())
  userId            String            @unique
  stripeCustomerId  String?           @unique
  stripeSubscriptionId String?        @unique
  stripePriceId     String?
  stripeCurrentPeriodEnd DateTime?
  plan              SubscriptionPlan  @default(FREE)
  status            SubscriptionStatus @default(ACTIVE)
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum SubscriptionPlan {
  FREE
  PRO
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  PAST_DUE
  UNPAID
}
